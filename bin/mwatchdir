#!/usr/bin/env node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright 2016 Joyent, Inc.
 */

var assert = require('assert-plus');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var tabula = require('tabula');
var util = require('util');

var MantaDirWatcher = require('../');
var pkg = require('../package.json');


// ---- custom dashdash option types

function parseFilterType(option, optstr, arg) {
    if (MantaDirWatcher.FILTER_TYPES.indexOf(arg) === -1) {
        throw new Error(format('arg for "%s" is not a known type: "%s"',
            optstr, arg));
    }
    return arg;
}

dashdash.addOptionType({
    name: 'filterType',
    takesArg: true,
    helpArg: 'TYPE',
    parseArg: parseFilterType
});


//---- globals and constants

var NAME = 'mwatchdir';

var OPTIONS = [
    {
        name: 'version',
        type: 'bool',
        help: 'Print ' + NAME + ' version and exit.'
    },
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Print this help and exit.'
    },
    {
        names: ['verbose', 'v'],
        type: 'bool',
        help: 'Verbose logging.'
    },
    {
        names: ['json', 'j'],
        type: 'bool',
        help: 'Output raw JSON polling data, rather than tabular output.'
    },
    {
        group: 'Watch Options'
    },
    {
        names: ['interval', 'i'],
        type: 'positiveInteger',
        help: 'Polling interval in seconds. Defaults to the library '
            + 'default of 60s.'
    },
    {
        names: ['name', 'n'],
        type: 'string',
        help: 'A glob string match against directory entry names to which '
            + 'to watch.'
    },
    {
        names: ['type', 't'],
        type: 'filterType',
        help: 'Either "object" or "directory" to limit matching to entries of '
            + 'that type.'
    },
    {
        group: 'Sync Options'
    },
    {
        names: ['sync-dir', 's'],
        type: 'string',
        helpArg: 'DIR',
        help: 'Sync the watched objects (this implies "-t object", syncing '
            + 'directories is not supported) to the given local directory. '
            + 'The event for an object is given after the sync is complete. '
            + 'This feature is intended for relatively small files.'
    },
    {
        names: ['sync-delete', 'D'],
        type: 'bool',
        help: 'Allow syncing to delete local files in the given sync dir.'
    },
    {
        names: ['disable-sync-delete-guard'],
        type: 'bool',
        help: 'Disable the automatic sync-delete guard. See "Syncing" below.'
    },
    {
        names: ['dry-run'],
        type: 'bool',
        help: 'Dry-run on syncing/deleting files.'
    },
];

var log = bunyan.createLogger({
    name: NAME,
    stream: process.stderr,
    level: 'warn'
});


//---- support functions

/**
 * A hacked up version of 'process.exit' that will first drain stdout
 * before exiting. *WARNING: This doesn't stop event processing.* IOW,
 * callers have to be careful that code following this call isn't
 * accidentally executed.
 */
function drainStdoutAndExit(code) {
    debug('(drainStdoutAndExit(%d))', code);
    stdout.on('drain', function () {
        cleanupAndExit(code);
    });
    if (stdoutFlushed) {
        cleanupAndExit(code);
    }
}


/**
 * A hacked up version of 'process.exit' that will first drain stdout
 * before exiting. *WARNING: This doesn't stop event processing.* IOW,
 * callers have to be careful that code following this call isn't
 * accidentally executed.
 */
var _drainingStdout = false;
function drainStdoutAndExit(stdout, code) {
    if (_drainingStdout) {
        return;
    }
    _drainingStdout = true;
    stdout.on('drain', function () {
        process.exit(code);
    });
    stdout.on('close', function () {
        process.exit(code);
    });
    stdout.write('');
}


function fatal(errmsg) {
    console.error(NAME + ': error: ' + errmsg);
    process.exit(1);
}

function mwatchdir(opts) {
    opts.log.debug({dir: opts.dir, interval: opts.interval,
        filter: opts.filter, json: opts.json,
        syncDir: opts.syncDir, syncDelete: opts.syncDelete,
        disableSyncDeleteGuard: opts.disableSyncDeleteGuard,
        dryRun: opts.dryRun}, 'mwatchdir');

    var watcher = new MantaDirWatcher({
        log: opts.log,
        dir: opts.dir,
        interval: opts.interval,
        filter: opts.filter,
        syncDir: opts.syncDir,
        syncDelete: opts.syncDelete,
        disableSyncDeleteGuard: opts.disableSyncDeleteGuard,
        dryRun: opts.dryRun
    });

    var firstEvent = true;

    watcher.on('data', function (group) {
        if (opts.json) {
            console.log(JSON.stringify(group));
        } else {
            var tabOpts = {
                skipHeader: !firstEvent,
                columns: [
                    {lookup: 'action', width: 6},
                    {lookup: 'timeEvent', width: 24},
                    {lookup: 'mtime', width: 24},
                    {lookup: 'path'}
                ]
            };
            tabula(group.events, tabOpts);
        }
        firstEvent = false;
    });
}


// ---- mainline

function main(argv) {
    var parser = dashdash.createParser({options: OPTIONS});
    try {
        var opts = parser.parse(process.argv);
    } catch (e) {
        console.error(NAME + ': error: %s', e.message);
        process.exit(1);
    }

    if (opts.help) {
        var help = parser.help({includeEnv: true}).trimRight();
        console.log([
            'Watch a directory in Manta.',
            '',
            'This will poll the given Manta dir and emit an event (a JSON',
            'object) for each change: a file or dir add/remove/change.',
            '',
            'Usage:',
            '    ' + NAME + ' [OPTIONS] MANTA-DIR',
            '',
            'Options:',
            help,
            '',
            'Syncing: With the "-s" option this tool supports syncing files',
            'from MANTA-DIR to the local DIR. It is intended for downloading',
            'relatively few and smaller files (e.g. config information).',
            'Syncing dirs is not supported.',
            '',
            'With "-D", local files in DIR without a match in MANTA-DIR will',
            'be deleted. There is a sanity guard to protect against deleting',
            'all files in a mis-chosen local DIR: if, on the first poll, there',
            'are local files that would be deleted *and* there are zero local',
            'files matching anything in the remote Manta dir (i.e. there is',
            'no indication that this is a correct sync dir), then mwatchdir',
            'will error out. "--disable-sync-delete-guard" will turn off this',
            'guard.'
        ].join('\n'));
        process.exit(0);
    } else if (opts.version) {
        console.log(NAME + ' ' + pkg.version);
        console.log(pkg.homepage);
        process.exit(0);
    }
    if (opts.verbose) {
        log.level('trace');
        log.src = true;
    }

    if (opts._args.length < 1) {
        fatal('missing MANTA-DIR argument');
    } else if (opts._args.length !== 1) {
        fatal('too many arguments: ' + opts._args.join(' '));
    }
    var dir = opts._args[0];

    // Stdout error handling.
    var stdout = process.stdout;
    stdout.on('error', function (err) {
        if (err.code === 'EPIPE') {
            drainStdoutAndExit(stdout, 0);
        } else {
            console.warn(err);
            drainStdoutAndExit(stdout, 1);
        }
    });

    var filter;
    if (opts.name || opts.type) {
        filter = {};
        if (opts.name) { filter.name = opts.name; }
        if (opts.type) { filter.type = opts.type; }
    }
    mwatchdir({
        log: log,
        dir: dir,
        json: opts.json,
        interval: opts.interval,
        filter: filter,
        syncDir: opts.sync_dir,
        syncDelete: opts.sync_delete,
        disableSyncDeleteGuard: opts.disable_sync_delete_guard,
        dryRun: opts.dry_run
    });
}

if (require.main === module) {
    main(process.argv);
}
